name: cool-workflow
on: [push, workflow_dispatch]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Ubuntu (GCC, Debug)"
            os: ubuntu-22.04
            preset: linux-vcpkg-gcc
            build-args: "--config Debug"
          # - name: "Ubuntu (GCC, Release)"
          #   os: ubuntu-22.04
          #   preset: linux-vcpkg-gcc
          #   build-args: "--config Release"
          - name: "Ubuntu (Clang, Debug)"
            os: ubuntu-22.04
            preset: linux-vcpkg-clang
            build-args: "--config Debug"
          - name: "Ubuntu (Clang, Release)"
            os: ubuntu-22.04
            preset: linux-vcpkg-clang
            build-args: "--config Release"
          - name: "Windows (MSVC, Debug)"
            os: windows-2022
            preset: windows-vcpkg-debug
          - name: "Windows (MSVC, Release)"
            os: windows-2022
            preset: windows-vcpkg-release
            package-name: "release-build"

    steps:
      - name: Install apt dependencies
        # nasm - ffmpeg build
        run: sudo apt-get install nasm
        if: startsWith(matrix.os, 'ubuntu')

      - name: Install Python dependencies
        # ninja - our build system
        run: pip install ninja
        if: startsWith(matrix.os, 'ubuntu')

      - name: Set vm.mmap_rnd_bits for sanitizer support
        run: |
          # https://github.com/google/sanitizers/issues/1716
          # https://github.com/actions/runner-images/issues/9515
          sudo sysctl -w vm.mmap_rnd_bits=28
        if: startsWith(matrix.os, 'ubuntu')

      - uses: actions/checkout@v4

      - uses: ilammy/msvc-dev-cmd@v1
        if: startsWith(matrix.os, 'windows')

      - uses: lukka/get-cmake@v3.28.3

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          # Only look for 'vcpkg.json' in the repo root.
          vcpkgJsonGlob: "vcpkg.json"

      - name: Configure
        run: cmake --preset ${{ matrix.preset }} -B ./build

      - name: Build
        run: cmake --build build ${{ matrix.build-args }}

      - name: Run tests
        run: ctest --test-dir build -j $(nproc) --output-on-failure --timeout 10

      - name: Package
        run: cpack -G ZIP --config build/CPackConfig.cmake -B build/my_packages
        if: ${{ matrix.package-name != '' }}

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package-name }}
          path: build/my_packages/*.zip
        if: ${{ matrix.package-name != '' }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    name: "Release"
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show downloaded artifacts
        run: ls -R artifacts

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**
